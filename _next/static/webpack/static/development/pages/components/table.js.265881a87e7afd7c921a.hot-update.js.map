{"version":3,"file":"static/webpack/static/development/pages/components/table.js.265881a87e7afd7c921a.hot-update.js","sources":["webpack:///./pages/components/table/PagedTable.demo.tsx?5708","webpack:///./pages/components/table/PagedTable.demo.tsx"],"sourcesContent":["export default \"import { useState } from 'react'\\n\\nimport { Button, Icon, PagedTable } from '../../../../lib'\\n\\ninterface RowType {\\n  id: number\\n  name: string\\n  age: number\\n}\\n\\nfunction PagedTableExample() {\\n  const [params, setParams] = useState({\\n    page: 0,\\n    size: 10,\\n    totalElements: allRows.length,\\n    totalPages: allRows.length / 10,\\n    sort: ['id'],\\n  })\\n\\n  const handleSortChange = (sort: string[]) => setParams(state => ({ ...state, sort }))\\n  const handlePageChange = (page: number) => setParams(state => ({ ...state, page }))\\n  const handleSizeChange = (size: number) =>\\n    setParams(state => ({ ...state, size, totalPages: Math.max(1, state.totalElements / size) }))\\n\\n  const rows = allRows\\n    // Naive sorting for example purposes:\\n    .sort((a, b) => {\\n      if (params.sort[0] === 'id') {\\n        return a.id - b.id\\n      }\\n      if (params.sort[0] === '-id') {\\n        return b.id - a.id\\n      }\\n      return 0\\n    })\\n    // Naive pagination for example purposes:\\n    .slice(params.page * params.size, params.page * params.size + params.size)\\n\\n  return (\\n    <PagedTable<RowType>\\n      rows={rows}\\n      page={params.page}\\n      size={params.size}\\n      totalElements={params.totalElements}\\n      totalPages={params.totalPages}\\n      sort={params.sort}\\n      onSortChange={handleSortChange}\\n      onPageChange={handlePageChange}\\n      onSizeChange={handleSizeChange}\\n      loading={false}\\n      columns={[\\n        {\\n          name: 'id',\\n          header: 'ID',\\n          sortable: true,\\n          render: item => item.id,\\n        },\\n        {\\n          name: 'name',\\n          header: 'Name',\\n          render: item => item.name,\\n        },\\n        {\\n          name: 'age',\\n          header: 'Age',\\n          render: item => item.age,\\n        },\\n        {\\n          name: 'actions',\\n          render: item => (\\n            <Button size='small' skin='ghost'>\\n              <Icon icon='penOutline' />\\n            </Button>\\n          ),\\n          style: { textAlign: 'right' },\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\\nexport default PagedTableExample\\n\\n// Fake data to populate table\\nlet id = 1\\nconst allRows: RowType[] = Array(30)\\n  .fill(true)\\n  .reduce(\\n    curr => [\\n      ...curr,\\n      { id: id++, name: 'MARIA MACHADO DE JESUS', age: 42 },\\n      { id: id++, name: 'JOSÉ DA SILVA MOREIRA', age: 34 },\\n      { id: id++, name: 'ALICE BARBOSA', age: 27 },\\n    ],\\n    [] as RowType[]\\n  )\\n\"","import { useState } from 'react'\n\nimport { Button, Icon, PagedTable } from '../../../../lib'\n\ninterface RowType {\n  id: number\n  name: string\n  age: number\n}\n\nfunction PagedTableExample() {\n  const [params, setParams] = useState({\n    page: 0,\n    size: 10,\n    totalElements: allRows.length,\n    totalPages: allRows.length / 10,\n    sort: ['id'],\n  })\n\n  const handleSortChange = (sort: string[]) => setParams(state => ({ ...state, sort }))\n  const handlePageChange = (page: number) => setParams(state => ({ ...state, page }))\n  const handleSizeChange = (size: number) =>\n    setParams(state => ({ ...state, size, totalPages: Math.max(1, state.totalElements / size) }))\n\n  const rows = allRows\n    // Naive sorting for example purposes:\n    .sort((a, b) => {\n      if (params.sort[0] === 'id') {\n        return a.id - b.id\n      }\n      if (params.sort[0] === '-id') {\n        return b.id - a.id\n      }\n      return 0\n    })\n    // Naive pagination for example purposes:\n    .slice(params.page * params.size, params.page * params.size + params.size)\n\n  return (\n    <PagedTable<RowType>\n      rows={rows}\n      page={params.page}\n      size={params.size}\n      totalElements={params.totalElements}\n      totalPages={params.totalPages}\n      sort={params.sort}\n      onSortChange={handleSortChange}\n      onPageChange={handlePageChange}\n      onSizeChange={handleSizeChange}\n      loading={false}\n      columns={[\n        {\n          name: 'id',\n          header: 'ID',\n          sortable: true,\n          render: item => item.id,\n        },\n        {\n          name: 'name',\n          header: 'Name',\n          render: item => item.name,\n        },\n        {\n          name: 'age',\n          header: 'Age',\n          render: item => item.age,\n        },\n        {\n          name: 'actions',\n          render: item => (\n            <Button size='small' skin='ghost'>\n              <Icon icon='penOutline' />\n            </Button>\n          ),\n          style: { textAlign: 'right' },\n        },\n      ]}\n    />\n  )\n}\n\nexport default PagedTableExample\n\n// Fake data to populate table\nlet id = 1\nconst allRows: RowType[] = Array(30)\n  .fill(true)\n  .reduce(\n    curr => [\n      ...curr,\n      { id: id++, name: 'MARIA MACHADO DE JESUS', age: 42 },\n      { id: id++, name: 'JOSÉ DA SILVA MOREIRA', age: 34 },\n      { id: id++, name: 'ALICE BARBOSA', age: 27 },\n    ],\n    [] as RowType[]\n  )\n"],"mappings":";;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAVA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AAPA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;;;;A","sourceRoot":""}